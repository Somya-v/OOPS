-> The idea that an object can use functionality from different classes depending on the context is a key idea that's essential to understanding polymorphism. 
-> Overloaded methods are faster because they are bonded during compile-time, which is an earlier phase than runtime. 
-> They also keep everything in one place, while with overridden methods you might be jumping all over the place in your code. 

//contact class
public class Contact {

	private String name;
	private PhoneNumber number;
	private String email;

	public Contact(String name, PhoneNumber number) {
		this.name = name;
		this.number = number;
	}

	public Contact(String name, String email) {
		this.name = name;
		this.email = email;
	}

	public Contact(String name, PhoneNumber number, String email) {
		this.name = name;
		this.number = number;
		this.email = email;
	}
	
	@Override
	public String toString() {
		return "Contact{ "+
					"name='" +name+'\''+
					", number="+  number+
					", email='"+email+'\''+'}';
		
	}

}

//Phone Number class
public class PhoneNumber {

	private String number;
	private int countryCode;

	public PhoneNumber(String number, int countryCode) {
		this.countryCode = countryCode;
		this.number = number;
	}

	public PhoneNumber(String number) {
		if (number.length() > 10) {
			this.countryCode = Integer.parseInt(number.substring(0, number.length() - 10));
			this.number = number.substring(number.length() - 10);
		} else {
			this.countryCode = 1;
			this.number = number;
		}
	}

	@Override
	public String toString() {
		return "PhoneNumber{ " + "countryCode='" + countryCode + '\'' + ", phoneNumber=" + number + '\'' + '}';

	}

}
